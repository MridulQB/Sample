type UserProfile = 
 record {
   notificationsEnabled: bool;
   preferredCurrency: text;
   theme: text;
 };
type User = 
 record {
   joinedAt: Time;
   "principal": principal;
   role: Role;
 };
type UpdateTransactionResponse = 
 variant {
   categoryEmpty;
   invalidTxn;
   paymentMethodEmpty;
   success;
 };
type UpdateProfileResponse = 
 variant {
   invalidUser;
   success;
 };
type TransactionId = nat;
type Transaction = 
 record {
   amount: nat;
   category: Category;
   createdAt: Time;
   date: Time;
   id: TransactionId;
   notes: opt text;
   owner: principal;
   paymentMethod: PaymentMethod;
   updatedAt: Time;
 };
type Time = int;
type SpendingTrend = 
 record {
   period: text;
   spent: int;
 };
type SetBudgetResponse = 
 variant {
   categoryEmpty;
   success;
 };
type Role = 
 variant {
   Admin;
   Editor;
 };
type RevokeAccessResponse = 
 variant {
   invalidUser;
   success;
   unauthorizedActivity;
 };
type PaymentMethodSummary = 
 record {
   count: nat;
   method: PaymentMethod;
   spent: int;
 };
type PaymentMethodResponse = 
 variant {
   invalidMethod;
   methodExists;
   success;
 };
type PaymentMethod = text;
type NotificationSettings = 
 record {
   browserNotifications: bool;
   budgetWarningThreshold: nat;
   emailNotifications: bool;
 };
type InviteToken = text;
type InvitationResponse = 
 variant {
   alreadyRegistered;
   alreadyUsedToken;
   expiredToken;
   invalidToken;
   success;
 };
type GenerateInviteLinkResponse = 
 variant {
   failed;
   success;
 };
type DeleteTransactionResponse = 
 variant {
   invalidTxn;
   success;
 };
type DeleteBudgetResponse = 
 variant {
   invalidCategory;
   success;
 };
type CategorySummary = 
 record {
   budget: opt nat;
   category: Category;
   percentage: float64;
   spent: int;
 };
type CategoryResponse = 
 variant {
   categoryExists;
   invalidCategory;
   success;
 };
type CategoryAction = 
 variant {
   add;
   delete;
 };
type Category = text;
type Budget = 
 record {
   amount: nat;
   category: Category;
   updatedAt: Time;
 };
type AddTransactionResponse = 
 variant {
   categoryEmpty;
   paymentMethodEmpty;
   success;
 };
service : {
  acceptInvite: (InviteToken) -> (InvitationResponse);
  addPaymentMethod: (PaymentMethod) -> (PaymentMethodResponse);
  addTransaction: (Time, nat, Category, PaymentMethod, opt text) ->
   (AddTransactionResponse);
  assertAdmin: () -> ();
  checkBudgetStatus: () -> (vec record {
                                  Category;
                                  nat;
                                  int;
                                  nat;
                                  bool;
                                });
  deleteBudget: (Category) -> (DeleteBudgetResponse);
  deletePaymentMethod: (PaymentMethod) -> (PaymentMethodResponse);
  deleteTransaction: (TransactionId) -> (DeleteTransactionResponse);
  generateInviteLink: () -> (GenerateInviteLinkResponse);
  getAllTransactions: () -> (vec record {
                                   TransactionId;
                                   Transaction;
                                 }) query;
  getBudgetAlertsForUser: (principal) ->
   (vec record {
          Category;
          int;
          nat;
          float64;
        }) query;
  getBudgetSummary: () -> (vec record {
                                 Category;
                                 nat;
                                 int;
                                 nat;
                               }) query;
  getBudgets: () -> (vec record {
                           Category;
                           Budget;
                         }) query;
  getCategories: () -> (vec Category) query;
  getCategorySummary: (opt Time, opt Time) -> (vec CategorySummary) query;
  getDashboardSummary: () ->
   (record {
      budgetStatus: vec record {
                          Category;
                          float64;
                        };
      categoriesCount: nat;
      totalExpenses: int;
      totalIncome: int;
      totalTransactions: nat;
    }) query;
  getFilteredTransactions: (opt Time, opt Time, opt int, opt int,
   opt Category, opt PaymentMethod) ->
   (vec record {
          TransactionId;
          Transaction;
        }) query;
  getNotificationSettingsByPrincipal: (principal) ->
   (opt NotificationSettings) query;
  getNotificationSettingsNyCaller: () -> (opt NotificationSettings) query;
  getPaymentMethodSummary: (opt Time, opt Time) ->
   (vec PaymentMethodSummary) query;
  getPaymentMethods: () -> (vec PaymentMethod) query;
  getSpendingTrends: (nat, opt Category) -> (vec SpendingTrend) query;
  getTransaction: (TransactionId) -> (opt Transaction) query;
  getTransactionsByUser: (principal) ->
   (vec record {
          TransactionId;
          Transaction;
        });
  getUserCategorySummary: (principal, opt Time, opt Time) ->
   (vec CategorySummary) query;
  getUserDashboardSummary: (principal) ->
   (record {
      budgetStatus: vec record {
                          Category;
                          float64;
                        };
      categoriesCount: nat;
      totalExpenses: int;
      totalIncome: int;
      totalTransactions: nat;
    }) query;
  getUserMonthlySummary: (principal) ->
   (record {
      budgetStatus: vec record {
                          Category;
                          nat;
                          int;
                          float64;
                        };
      periodEnd: Time;
      periodStart: Time;
      topCategories: vec record {
                           Category;
                           int;
                         };
      topPaymentMethods: vec record {
                               PaymentMethod;
                               int;
                             };
      totalExpenses: int;
      totalIncome: int;
      totalTransactions: nat;
    }) query;
  getUserPaymentMethodSummary: (principal, opt Time, opt Time) ->
   (vec PaymentMethodSummary) query;
  getUserProfileByCaller: () -> (opt UserProfile) query;
  getUserProfileByPrincipal: (principal) -> (opt UserProfile) query;
  getUserSpendingTrends: (principal, nat, opt Category) ->
   (vec SpendingTrend) query;
  getUserTransactionsByCaller: () ->
   (vec record {
          TransactionId;
          Transaction;
        }) query;
  getUserTransactionsByPrincipal: (principal) ->
   (vec record {
          TransactionId;
          Transaction;
        }) query;
  getUsers: () -> (vec User) query;
  manageCategory: (Category, CategoryAction) -> (CategoryResponse);
  revokeAccess: (principal) -> (RevokeAccessResponse);
  setBudget: (Category, nat) -> (SetBudgetResponse);
  setNotificationSettings: (NotificationSettings) -> (UpdateProfileResponse);
  setUserProfile: (UserProfile) -> (UpdateProfileResponse);
  updateTransaction: (TransactionId, Time, nat, Category, PaymentMethod,
   opt text) -> (UpdateTransactionResponse);
}
